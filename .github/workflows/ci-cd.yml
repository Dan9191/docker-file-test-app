name: Build, Test and Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: chmod for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build project
        run: ./gradlew build


  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: chmod for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: chmod for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build the project (again for deploy)
        run: ./gradlew build --no-daemon

      - name: Copy files to remote server
        run: |
          scp -i ${{ secrets.DEPLOY_KEY }} build/libs/docker-file-test-app-0.0.1-SNAPSHOT.jar root@45.9.40.117:build/libs/

      - name: SSH into remote server and restart the app
        run: |
          ssh -i ${{ secrets.DEPLOY_KEY }} root@45.9.40.117 'sudo systemctl restart your-app.service'
